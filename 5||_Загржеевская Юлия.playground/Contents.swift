import UIKit
import Foundation


enum windows {
    case open, close
}

enum engine {
    case start, stop
}

protocol Car: AnyObject {
    var model: String {get}
    var release: Int {get}
    var windows: windows {get set}
    var engine: engine {get set}
}

extension Car {
    func Windows (status: windows) {
        switch status {
        case .open:
            print ("\(model): –û–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã")
            self.windows = .open
        case .close:
            print("\(model): –û–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã")
            windows = .close
        }
    }
    
    func Engine (status: engine) {
        switch status {
        case .start:
            print ("\(model): –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≤–µ–¥—ë–Ω")
            self.engine = .start
        case .stop:
            print ("\(model): –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à—ë–Ω")
            engine = .stop
        }
    }
}

protocol Trunk: Car {
    var Body: Int {get}
    var BodySpace: Int {get}
    var Cargo: Int {get set}
}

extension Trunk {
    func PutinCargo (volume: Int) {
        if BodySpace >= volume {
            print ("\(model): –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(volume) –∫–≥ –≤ –±–∞–≥–∞–∂–Ω–∏–∫")
            self.Cargo += volume
        } else {
            print ("\(model): –í –±–∞–≥–∞–∂–Ω–∏–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è \(volume) –∫–≥ ")
        }
    }

    func OutfromCargo (volume: Int) {
        if self.Body >= volume {
            print ("\(model): \(volume) –∫–≥ —Ä–∞–∑–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –∞–≤—Ç–æ")
            self.Cargo -= volume
        } else {
            print ("\(model): \(volume) - —Ç–∞–∫–æ–≥–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ –∫–≥ –≤ –±–∞–≥–∞–∂–Ω–∏–∫–µ –Ω–µ—Ç, —É–≤—ã")
        }
    }
}

protocol Sport: Car {
    var maxSpeed: Int {get}
    var currentSpeed: Int {get set}
}

extension Sport {
    func IncreaseSpeed (speed: Int) {
        if speed + currentSpeed <= maxSpeed {
            print ("\(model): –†–∞–∑–≥–æ–Ω—è–µ—Ç—Å—è –¥–æ \(speed) ")
            self.currentSpeed += speed
        } else {
            print ("\(model): –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–∑–æ–≥–Ω–∞—Ç—å—Å—è –¥–æ \(speed) –∫–º/—á, —Ç–∞–∫ –∫–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å - \(maxSpeed) –∫–º/—á")
        }
    }
    
    func ReduceSpeed (speed: Int) {
        if self.currentSpeed >= speed {
            print ("\(model): C–Ω–∏–∂–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ \(speed)" )
            self.currentSpeed -= speed
        } else {
            print ("\(model): –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å")
            self.currentSpeed = 0
        }
    }
}

class TrunkCar: Trunk {
    var model: String
    var release: Int
    var windows: windows
    var engine: engine
    var Body: Int
    var Cargo: Int
    var BodySpace: Int {
        get { return Body - Cargo }
    }

init (model: String, release: Int, Body: Int) {
    self.Body = Body
    self.Cargo = 0
    self.model = model
    self.release = release
    self.engine = .stop
    self.windows = .open
    }
}

class SportCar: Sport {
    var model: String
    var release: Int
    var windows: windows
    var engine: engine
    var maxSpeed: Int
    var currentSpeed: Int
    
    init (model: String, release: Int, maxSpeed: Int) {
        self.maxSpeed = maxSpeed
        self.currentSpeed = 0
        self.model = model
        self.release = release
        self.engine = .start
        self.windows = .close
    }
}

extension TrunkCar: CustomStringConvertible {
    var description: String {
        return "–ê–≤—Ç–æ–º–æ–±–∏–ª—å: \(model) \n" +
        "–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: \(release) \n" +
        "–î–≤–∏–≥–∞—Ç–µ–ª—å: \(engine) \n" +
        "–û–∫–Ω–∞: \(windows) \n" +
        "–ö—É–∑–æ–≤: \(BodySpace) - –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å\n" +
        "–ë–∞–≥–∞–∂–Ω–∏–∫: \(Cargo) –∫–≥\n"
    }
}

extension SportCar: CustomStringConvertible {
    var description: String {
        return "–ê–≤—Ç–æ–º–æ–±–∏–ª—å: \(model) \n" +
        "–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: \(release) \n" +
        "–î–≤–∏–≥–∞—Ç–µ–ª—å: \(engine) \n" +
        "–û–∫–Ω–∞: \(windows) \n" +
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: \(maxSpeed) –∫–º/—á \n" +
        "–°–∫–æ—Ä–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: \(currentSpeed) –∫–º/—á \n"
    }
}

print ("   ")
print ("     ")
print ("–ê–≤—Ç–æ–ø–∞—Ä–∫, –∫–æ–≥–¥–∞ —è —Å—Ç–∞–Ω–Ω—É –º–∏–ª–ª–∏–æ–Ω–µ—Ä—à–µ–π üôÇ")
print ("     ")

var SportCar1 = SportCar (model: "Mustang", release: 2020, maxSpeed: 450)
var SportCar2 = SportCar (model: "Ferarri", release: 2020, maxSpeed: 450)
var TrunkCar3 = TrunkCar (model: "Volvo", release: 2013, Body: 3000)

print ("     ")
print ("     ")

print ("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
print ("     ")
SportCar1.Engine(status: .start)
SportCar1.Windows(status: .close)
SportCar1.IncreaseSpeed(speed: 100)
SportCar1.ReduceSpeed(speed: 50)
SportCar1.ReduceSpeed(speed: 5)
SportCar1.IncreaseSpeed(speed: 500)
print ("     ")
SportCar2.Engine(status: .stop)
SportCar2.Windows(status: .open)
print ("     ")
TrunkCar3.PutinCargo(volume: 2999)
TrunkCar3.PutinCargo(volume: 13)
TrunkCar3.OutfromCargo(volume: 100)
TrunkCar3.OutfromCargo(volume: 4000)
TrunkCar3.Engine(status: .stop)
TrunkCar3.Windows(status: .open)

print ("     ")
print("–û–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞")
print ("     ")

print(SportCar1)
print(SportCar2)
print(TrunkCar3)
