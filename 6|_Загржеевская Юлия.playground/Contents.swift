import UIKit
import Foundation

struct queue <Name: Comparable> {
    var Array = [Name] ()

    mutating func add ( _ array: Name ) {
        Array.append (array)
    }

    mutating func next() -> Name {
        print (" \(Array.first!)")
        return Array.removeFirst()
    }

    func filter (array: Name) {
        print ("–≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫ —Å –∏–º–µ–Ω–µ–º \(Array.filter {$0 == array})")
        // filter(array:array) { (Name) in return Name == array}
    }

    mutating func Sorting() -> [Name] {
//    return Array.sorted(by: >) // > - –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        return Array.shuffled() // —Å —É–º–∞ —Å–æ—à–ª–∞, –ø–æ–∫–∞ –∏—Å–∫–∞–ª–∞, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–æ —ç—Ç–æ —Å—Ç–æ–∏–ª–æ —Ç–æ–≥–æ )))
    }


    subscript (index: Int) -> Name? {
        return (index < Array.count ? Array[index] : nil)
    }

    func Counting() {
        print (Array.count)
    }
    
}

var Queue = queue <String> (Array: ["–í–ª–∞–¥", "–ê–Ω–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–Æ—Ä–∏–π", "–û–ª–µ—Å—è"])
print ("–û—á–µ—Ä–µ–¥—å –∑–∞ –Ω–æ–≤—ã–º –ê–π—Ñ–æ–Ω–æ–º üì±")
print (Queue.Array)

print ("   ")
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏:")
Queue.Counting()

print ("   ")
print("–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ")
print(Queue[0])

print ("   ")
print("–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å  –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ")
print(Queue[4])

print ("   ")
print ("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é –∂–µ–ª–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ê–π—Ñ–æ–Ω–∞: \(Queue.Sorting())")
print ("   ")

print("–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —ç—Ç–æ, –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏ –∫—É–ø–∏–ª –ê–π—Ñ–æ–Ω:")
Queue.next()
print ("–ê –∑–∞ –Ω–∏–º:")
Queue.next()
print ("   ")

print ("–û—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞—Å—Ç–∏...")
Queue.add ("–ê–ª—ë—à–∞")
Queue.add ("C–∞–Ω—è")
Queue.add ("–ú–∏—à–∞")
Queue.add ("–ú–∞—Ä–∏–Ω–∞")
Queue.add ("–ï–ª–µ–Ω–∞")
print(Queue)

print ("   ")
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏:")
Queue.Counting()

print ("   ")
print("–ó–∞—Ç–æ —Ç–µ–ø–µ—Ä—å..")
Queue.filter(array: "–ê–ª—ë—à–∞")





